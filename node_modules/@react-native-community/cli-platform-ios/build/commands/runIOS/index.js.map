{"version":3,"sources":["../../../src/commands/runIOS/index.ts"],"names":["runIOS","_","ctx","args","fs","existsSync","projectPath","CLIError","process","chdir","xcodeProject","readdirSync","inferredSchemeName","path","basename","name","extname","scheme","logger","info","isWorkspace","chalk","bold","device","udid","runOnSimulator","devices","child_process","execFileSync","encoding","length","error","selectedDevice","matchingDevice","runOnDevice","String","printFoundDevices","simulators","JSON","parse","fallbackSimulators","selectedSimulator","reduce","simulator","fallback","activeDeveloperDir","trim","booted","bootSimulator","appName","buildProject","appPath","getBuildPath","configuration","spawnSync","stdio","bundleID","join","result","status","success","stderr","isIOSDeployInstalled","iosDeployInstallArgs","iosDeployOutput","message","Promise","resolve","reject","xcodebuildArgs","dim","xcpretty","verbose","xcprettyAvailable","spawn","stdout","buildProcess","getProcessOptions","buildOutput","errorOutput","on","data","stringData","toString","stdin","write","isVerbose","debug","code","end","getProductName","simulatorFullName","formattedDeviceName","_ignored","getTargetBuildDir","buildSettings","settings","i","wrapperExtension","WRAPPER_EXTENSION","TARGET_BUILD_DIR","isDevice","toLowerCase","includes","targetBuildDir","productNameMatch","exec","execSync","deviceName","matchingDeviceByUdid","find","version","map","packager","terminal","port","env","RCT_TERMINAL","RCT_METRO_PORT","RCT_NO_LAUNCH_PACKAGER","description","func","examples","desc","cmd","options","default","val","Number","getDefaultUserTerminal"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport child_process, {\n  ChildProcess,\n  // @ts-ignore\n  SpawnOptionsWithoutStdio,\n} from 'child_process';\nimport fs from 'fs';\nimport path from 'path';\nimport chalk from 'chalk';\nimport {Config} from '@react-native-community/cli-types';\nimport findXcodeProject, {ProjectInfo} from './findXcodeProject';\nimport parseIOSDevicesList from './parseIOSDevicesList';\nimport findMatchingSimulator from './findMatchingSimulator';\nimport warnAboutManuallyLinkedLibs from '../../link/warnAboutManuallyLinkedLibs';\nimport warnAboutPodInstall from '../../link/warnAboutPodInstall';\nimport {\n  logger,\n  CLIError,\n  getDefaultUserTerminal,\n} from '@react-native-community/cli-tools';\nimport {Device} from '../../types';\n\ntype FlagsT = {\n  simulator: string;\n  configuration: string;\n  scheme?: string;\n  projectPath: string;\n  device?: string | true;\n  udid?: string;\n  packager: boolean;\n  verbose: boolean;\n  port: number;\n  terminal: string | undefined;\n};\n\nfunction runIOS(_: Array<string>, ctx: Config, args: FlagsT) {\n  if (!fs.existsSync(args.projectPath)) {\n    throw new CLIError(\n      'iOS project folder not found. Are you sure this is a React Native project?',\n    );\n  }\n\n  warnAboutManuallyLinkedLibs(ctx);\n  warnAboutPodInstall(ctx);\n\n  process.chdir(args.projectPath);\n\n  const xcodeProject = findXcodeProject(fs.readdirSync('.'));\n  if (!xcodeProject) {\n    throw new CLIError(\n      `Could not find Xcode project files in \"${args.projectPath}\" folder`,\n    );\n  }\n\n  const inferredSchemeName = path.basename(\n    xcodeProject.name,\n    path.extname(xcodeProject.name),\n  );\n  const scheme = args.scheme || inferredSchemeName;\n\n  logger.info(\n    `Found Xcode ${\n      xcodeProject.isWorkspace ? 'workspace' : 'project'\n    } \"${chalk.bold(xcodeProject.name)}\"`,\n  );\n\n  const {device, udid} = args;\n\n  if (!device && !udid) {\n    return runOnSimulator(xcodeProject, scheme, args);\n  }\n\n  const devices = parseIOSDevicesList(\n    child_process.execFileSync('xcrun', ['instruments', '-s'], {\n      encoding: 'utf8',\n    }),\n  );\n\n  // first device is always the host Mac\n  if (devices.length <= 1) {\n    return logger.error('No iOS devices connected.');\n  }\n\n  const selectedDevice = matchingDevice(devices, device, udid);\n\n  if (selectedDevice) {\n    return runOnDevice(selectedDevice, scheme, xcodeProject, args);\n  }\n\n  if (device) {\n    return logger.error(\n      `Could not find a device named: \"${chalk.bold(\n        String(device),\n      )}\". ${printFoundDevices(devices)}`,\n    );\n  }\n\n  if (udid) {\n    return logger.error(\n      `Could not find a device with udid: \"${chalk.bold(\n        udid,\n      )}\". ${printFoundDevices(devices)}`,\n    );\n  }\n}\n\nasync function runOnSimulator(\n  xcodeProject: ProjectInfo,\n  scheme: string,\n  args: FlagsT,\n) {\n  let simulators: {devices: {[index: string]: Array<Device>}};\n  try {\n    simulators = JSON.parse(\n      child_process.execFileSync(\n        'xcrun',\n        ['simctl', 'list', '--json', 'devices'],\n        {encoding: 'utf8'},\n      ),\n    );\n  } catch (error) {\n    throw new CLIError(\n      'Could not get the simulator list from Xcode. Please open Xcode and try running project directly from there to resolve the remaining issues.',\n      error,\n    );\n  }\n\n  /**\n   * If provided simulator does not exist, try simulators in following order\n   * - iPhone X\n   * - iPhone 8\n   */\n\n  const fallbackSimulators = ['iPhone X', 'iPhone 8'];\n  const selectedSimulator = fallbackSimulators.reduce((simulator, fallback) => {\n    return simulator || findMatchingSimulator(simulators, fallback);\n  }, findMatchingSimulator(simulators, args.simulator));\n\n  if (!selectedSimulator) {\n    throw new CLIError(`Could not find \"${args.simulator}\" simulator`);\n  }\n\n  /**\n   * Booting simulator through `xcrun simctl boot` will boot it in the `headless` mode\n   * (running in the background).\n   *\n   * In order for user to see the app and the simulator itself, we have to make sure\n   * that the Simulator.app is running.\n   *\n   * We also pass it `-CurrentDeviceUDID` so that when we launch it for the first time,\n   * it will not boot the \"default\" device, but the one we set. If the app is already running,\n   * this flag has no effect.\n   */\n  const activeDeveloperDir = child_process\n    .execFileSync('xcode-select', ['-p'], {encoding: 'utf8'})\n    .trim();\n\n  child_process.execFileSync('open', [\n    `${activeDeveloperDir}/Applications/Simulator.app`,\n    '--args',\n    '-CurrentDeviceUDID',\n    selectedSimulator.udid,\n  ]);\n\n  if (!selectedSimulator.booted) {\n    bootSimulator(selectedSimulator);\n  }\n\n  const appName = await buildProject(\n    xcodeProject,\n    selectedSimulator.udid,\n    scheme,\n    args,\n  );\n\n  const appPath = getBuildPath(\n    xcodeProject,\n    args.configuration,\n    appName,\n    false,\n    scheme,\n  );\n\n  logger.info(`Installing \"${chalk.bold(appPath)}\"`);\n\n  child_process.spawnSync(\n    'xcrun',\n    ['simctl', 'install', selectedSimulator.udid, appPath],\n    {stdio: 'inherit'},\n  );\n\n  const bundleID = child_process\n    .execFileSync(\n      '/usr/libexec/PlistBuddy',\n      ['-c', 'Print:CFBundleIdentifier', path.join(appPath, 'Info.plist')],\n      {encoding: 'utf8'},\n    )\n    .trim();\n\n  logger.info(`Launching \"${chalk.bold(bundleID)}\"`);\n\n  const result = child_process.spawnSync('xcrun', [\n    'simctl',\n    'launch',\n    selectedSimulator.udid,\n    bundleID,\n  ]);\n\n  if (result.status === 0) {\n    logger.success('Successfully launched the app on the simulator');\n  } else {\n    logger.error('Failed to launch the app on simulator', result.stderr);\n  }\n}\n\nasync function runOnDevice(\n  selectedDevice: Device,\n  scheme: string,\n  xcodeProject: ProjectInfo,\n  args: FlagsT,\n) {\n  const isIOSDeployInstalled = child_process.spawnSync(\n    'ios-deploy',\n    ['--version'],\n    {encoding: 'utf8'},\n  );\n\n  if (isIOSDeployInstalled.error) {\n    throw new CLIError(\n      `Failed to install the app on the device because we couldn't execute the \"ios-deploy\" command. Please install it by running \"${chalk.bold(\n        'npm install -g ios-deploy',\n      )}\" and try again.`,\n    );\n  }\n\n  const appName = await buildProject(\n    xcodeProject,\n    selectedDevice.udid,\n    scheme,\n    args,\n  );\n\n  const iosDeployInstallArgs = [\n    '--bundle',\n    getBuildPath(xcodeProject, args.configuration, appName, true, scheme),\n    '--id',\n    selectedDevice.udid,\n    '--justlaunch',\n  ];\n\n  logger.info(`Installing and launching your app on ${selectedDevice.name}`);\n\n  const iosDeployOutput = child_process.spawnSync(\n    'ios-deploy',\n    iosDeployInstallArgs,\n    {encoding: 'utf8'},\n  );\n\n  if (iosDeployOutput.error) {\n    throw new CLIError(\n      `Failed to install the app on the device. We've encountered an error in \"ios-deploy\" command: ${\n        iosDeployOutput.error.message\n      }`,\n    );\n  }\n\n  return logger.success('Installed the app on the device.');\n}\n\nfunction buildProject(\n  xcodeProject: ProjectInfo,\n  udid: string | undefined,\n  scheme: string,\n  args: FlagsT,\n): Promise<string> {\n  return new Promise((resolve, reject) => {\n    const xcodebuildArgs = [\n      xcodeProject.isWorkspace ? '-workspace' : '-project',\n      xcodeProject.name,\n      '-configuration',\n      args.configuration,\n      '-scheme',\n      scheme,\n      '-destination',\n      `id=${udid}`,\n    ];\n    logger.info(\n      `Building ${chalk.dim(\n        `(using \"xcodebuild ${xcodebuildArgs.join(' ')}\")`,\n      )}`,\n    );\n    let xcpretty: ChildProcess | any;\n    if (!args.verbose) {\n      xcpretty =\n        xcprettyAvailable() &&\n        child_process.spawn('xcpretty', [], {\n          stdio: ['pipe', process.stdout, process.stderr],\n        });\n    }\n    const buildProcess = child_process.spawn(\n      'xcodebuild',\n      xcodebuildArgs,\n      getProcessOptions(args),\n    );\n    let buildOutput = '';\n    let errorOutput = '';\n    buildProcess.stdout.on('data', (data: Buffer) => {\n      const stringData = data.toString();\n      buildOutput += stringData;\n      if (xcpretty) {\n        xcpretty.stdin.write(data);\n      } else {\n        if (logger.isVerbose()) {\n          logger.debug(stringData);\n        } else {\n          process.stdout.write('.');\n        }\n      }\n    });\n    buildProcess.stderr.on('data', (data: Buffer) => {\n      errorOutput += data;\n    });\n    buildProcess.on('close', (code: number) => {\n      if (xcpretty) {\n        xcpretty.stdin.end();\n      } else {\n        process.stdout.write('\\n');\n      }\n      if (code !== 0) {\n        reject(\n          new CLIError(\n            `\n            Failed to build iOS project.\n\n            We ran \"xcodebuild\" command but it exited with error code ${code}. To debug build\n            logs further, consider building your app with Xcode.app, by opening\n            ${xcodeProject.name}.\n          `,\n            buildOutput + '\\n' + errorOutput,\n          ),\n        );\n        return;\n      }\n      resolve(getProductName(buildOutput) || scheme);\n    });\n  });\n}\n\nfunction bootSimulator(selectedSimulator: Device) {\n  const simulatorFullName = formattedDeviceName(selectedSimulator);\n  logger.info(`Launching ${simulatorFullName}`);\n  try {\n    child_process.spawnSync('xcrun', [\n      'instruments',\n      '-w',\n      selectedSimulator.udid,\n    ]);\n  } catch (_ignored) {\n    // instruments always fail with 255 because it expects more arguments,\n    // but we want it to only launch the simulator\n  }\n}\n\nfunction getTargetBuildDir(buildSettings: string) {\n  const settings = JSON.parse(buildSettings);\n\n  // Find app in all building settings - look for WRAPPER_EXTENSION: 'app',\n  for (const i in settings) {\n    const wrapperExtension = settings[i].buildSettings.WRAPPER_EXTENSION;\n    if (wrapperExtension === 'app') {\n      return settings[i].buildSettings.TARGET_BUILD_DIR;\n    }\n  }\n\n  return null;\n}\n\nfunction getBuildPath(\n  xcodeProject: ProjectInfo,\n  configuration: string,\n  appName: string,\n  isDevice: boolean,\n  scheme: string,\n) {\n  let device;\n\n  if (isDevice) {\n    device = 'iphoneos';\n  } else if (appName.toLowerCase().includes('tvos')) {\n    device = 'appletvsimulator';\n  } else {\n    device = 'iphonesimulator';\n  }\n\n  const buildSettings = child_process.execFileSync(\n    'xcodebuild',\n    [\n      xcodeProject.isWorkspace ? '-workspace' : '-project',\n      xcodeProject.name,\n      '-scheme',\n      scheme,\n      '-sdk',\n      device,\n      '-configuration',\n      configuration,\n      '-showBuildSettings',\n      '-json',\n    ],\n    {encoding: 'utf8'},\n  );\n  const targetBuildDir = getTargetBuildDir(buildSettings);\n  if (!targetBuildDir) {\n    throw new CLIError('Failed to get the target build directory.');\n  }\n\n  return `${targetBuildDir}/${appName}.app`;\n}\n\nfunction getProductName(buildOutput: string) {\n  const productNameMatch = /export FULL_PRODUCT_NAME=\"?(.+).app\"?$/m.exec(\n    buildOutput,\n  );\n  return productNameMatch ? productNameMatch[1] : null;\n}\n\nfunction xcprettyAvailable() {\n  try {\n    child_process.execSync('xcpretty --version', {\n      stdio: [0, 'pipe', 'ignore'],\n    });\n  } catch (error) {\n    return false;\n  }\n  return true;\n}\n\nfunction matchingDevice(\n  devices: Array<Device>,\n  deviceName: string | true | undefined,\n  udid: string | undefined,\n) {\n  if (udid) {\n    return matchingDeviceByUdid(devices, udid);\n  }\n  if (deviceName === true && devices.length === 1) {\n    logger.info(\n      `Using first available device named \"${chalk.bold(\n        devices[0].name,\n      )}\" due to lack of name supplied.`,\n    );\n    return devices[0];\n  }\n  return devices.find(\n    device =>\n      device.name === deviceName || formattedDeviceName(device) === deviceName,\n  );\n}\n\nfunction matchingDeviceByUdid(\n  devices: Array<Device>,\n  udid: string | undefined,\n) {\n  return devices.find(device => device.udid === udid);\n}\n\nfunction formattedDeviceName(simulator: Device) {\n  return `${simulator.name} (${simulator.version})`;\n}\n\nfunction printFoundDevices(devices: Array<Device>) {\n  return [\n    'Available devices:',\n    ...devices.map(device => `  - ${device.name} (${device.udid})`),\n  ].join('\\n');\n}\n\nfunction getProcessOptions({\n  packager,\n  terminal,\n  port,\n}: {\n  packager: boolean;\n  terminal: string | undefined;\n  port: number;\n}): SpawnOptionsWithoutStdio {\n  if (packager) {\n    return {\n      env: {\n        ...process.env,\n        RCT_TERMINAL: terminal,\n        RCT_METRO_PORT: port.toString(),\n      },\n    };\n  }\n\n  return {\n    env: {\n      ...process.env,\n      RCT_TERMINAL: terminal,\n      RCT_NO_LAUNCH_PACKAGER: 'true',\n    },\n  };\n}\n\nexport default {\n  name: 'run-ios',\n  description: 'builds your app and starts it on iOS simulator',\n  func: runIOS,\n  examples: [\n    {\n      desc: 'Run on a different simulator, e.g. iPhone 5',\n      cmd: 'react-native run-ios --simulator \"iPhone 5\"',\n    },\n    {\n      desc: 'Pass a non-standard location of iOS directory',\n      cmd: 'react-native run-ios --project-path \"./app/ios\"',\n    },\n    {\n      desc: \"Run on a connected device, e.g. Max's iPhone\",\n      cmd: 'react-native run-ios --device \"Max\\'s iPhone\"',\n    },\n    {\n      desc: 'Run on the AppleTV simulator',\n      cmd:\n        'react-native run-ios --simulator \"Apple TV\"  --scheme \"helloworld-tvOS\"',\n    },\n  ],\n  options: [\n    {\n      name: '--simulator [string]',\n      description:\n        'Explicitly set simulator to use. Optionally include iOS version between' +\n        'parenthesis at the end to match an exact version: \"iPhone 6 (10.0)\"',\n      default: 'iPhone 11',\n    },\n    {\n      name: '--configuration [string]',\n      description: 'Explicitly set the scheme configuration to use',\n      default: 'Debug',\n    },\n    {\n      name: '--scheme [string]',\n      description: 'Explicitly set Xcode scheme to use',\n    },\n    {\n      name: '--project-path [string]',\n      description:\n        'Path relative to project root where the Xcode project ' +\n        '(.xcodeproj) lives.',\n      default: 'ios',\n    },\n    {\n      name: '--device [string]',\n      description:\n        'Explicitly set device to use by name.  The value is not required if you have a single device connected.',\n    },\n    {\n      name: '--udid [string]',\n      description: 'Explicitly set device to use by udid',\n    },\n    {\n      name: '--no-packager',\n      description: 'Do not launch packager while building',\n    },\n    {\n      name: '--verbose',\n      description: 'Do not use xcpretty even if installed',\n    },\n    {\n      name: '--port [number]',\n      default: process.env.RCT_METRO_PORT || 8081,\n      parse: (val: string) => Number(val),\n    },\n    {\n      name: '--terminal [string]',\n      description:\n        'Launches the Metro Bundler in a new window using the specified terminal path.',\n      default: getDefaultUserTerminal,\n    },\n  ],\n};\n"]}