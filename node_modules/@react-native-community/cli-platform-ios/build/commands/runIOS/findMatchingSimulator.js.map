{"version":3,"sources":["../../../src/commands/runIOS/findMatchingSimulator.ts"],"names":["findMatchingSimulator","simulators","simulatorString","devices","simulatorVersion","simulatorName","parsedSimulatorName","match","undefined","versionDescriptor","device","version","test","replace","includes","endsWith","i","simulator","availability","isAvailable","booted","state","udid","name"],"mappings":";;;;;;;AAAA;;;;;;;;AAUA;;;;;;;;;;;;AAYA,SAASA,qBAAT,CACEC,UADF,EAEEC,eAFF,EAGE;AACA,MAAI,CAACD,UAAU,CAACE,OAAhB,EAAyB;AACvB,WAAO,IAAP;AACD;;AACD,QAAMA,OAAO,GAAGF,UAAU,CAACE,OAA3B;AACA,MAAIC,gBAAJ;AACA,MAAIC,aAAJ;AAEA,QAAMC,mBAAmB,GAAGJ,eAAe,GACvCA,eAAe,CAACK,KAAhB,CAAsB,4BAAtB,CADuC,GAEvC,EAFJ;;AAIA,MAAID,mBAAmB,IAAIA,mBAAmB,CAAC,CAAD,CAAnB,KAA2BE,SAAtD,EAAiE;AAC/DJ,IAAAA,gBAAgB,GAAGE,mBAAmB,CAAC,CAAD,CAAtC;AACAD,IAAAA,aAAa,GAAGC,mBAAmB,CAAC,CAAD,CAAnC;AACD,GAHD,MAGO;AACLD,IAAAA,aAAa,GAAGH,eAAhB;AACD;;AAED,MAAIK,KAAJ;;AACA,OAAK,MAAME,iBAAX,IAAgCN,OAAhC,EAAyC;AACvC,UAAMO,MAAM,GAAGP,OAAO,CAACM,iBAAD,CAAtB;AACA,QAAIE,OAAO,GAAGF,iBAAd;;AAEA,QAAI,4CAA4CG,IAA5C,CAAiDD,OAAjD,CAAJ,EAA+D;AAC7D;AACAA,MAAAA,OAAO,GAAGA,OAAO,CAACE,OAAR,CACR,mEADQ,EAER,UAFQ,CAAV;AAID,KAVsC,CAYvC;;;AACA,QAAI,CAACF,OAAO,CAACG,QAAR,CAAiB,KAAjB,CAAD,IAA4B,CAACH,OAAO,CAACG,QAAR,CAAiB,MAAjB,CAAjC,EAA2D;AACzD;AACD;;AACD,QAAIV,gBAAgB,IAAI,CAACO,OAAO,CAACI,QAAR,CAAiBX,gBAAjB,CAAzB,EAA6D;AAC3D;AACD;;AACD,SAAK,MAAMY,CAAX,IAAgBN,MAAhB,EAAwB;AACtB,YAAMO,SAAS,GAAGP,MAAM,CAACM,CAAD,CAAxB,CADsB,CAEtB;;AACA,UACEC,SAAS,CAACC,YAAV,KAA2B,aAA3B,IACA;AACAD,MAAAA,SAAS,CAACE,WAAV,KAA0B,KAF1B,IAGAF,SAAS,CAACE,WAAV,KAA0B,IAJ5B,EAKE;AACA;AACD;;AACD,YAAMC,MAAM,GAAGH,SAAS,CAACI,KAAV,KAAoB,QAAnC;;AACA,UAAID,MAAM,IAAIf,aAAa,KAAK,IAAhC,EAAsC;AACpC,eAAO;AACLiB,UAAAA,IAAI,EAAEL,SAAS,CAACK,IADX;AAELC,UAAAA,IAAI,EAAEN,SAAS,CAACM,IAFX;AAGLH,UAAAA,MAHK;AAILT,UAAAA;AAJK,SAAP;AAMD;;AACD,UAAIM,SAAS,CAACM,IAAV,KAAmBlB,aAAnB,IAAoC,CAACE,KAAzC,EAAgD;AAC9CA,QAAAA,KAAK,GAAG;AACNe,UAAAA,IAAI,EAAEL,SAAS,CAACK,IADV;AAENC,UAAAA,IAAI,EAAEN,SAAS,CAACM,IAFV;AAGNH,UAAAA,MAHM;AAINT,UAAAA;AAJM,SAAR;AAMD,OA3BqB,CA4BtB;;;AACA,UAAIN,aAAa,KAAK,IAAlB,IAA0B,CAACE,KAA/B,EAAsC;AACpCA,QAAAA,KAAK,GAAG;AACNe,UAAAA,IAAI,EAAEL,SAAS,CAACK,IADV;AAENC,UAAAA,IAAI,EAAEN,SAAS,CAACM,IAFV;AAGNH,UAAAA,MAHM;AAINT,UAAAA;AAJM,SAAR;AAMD;AACF;AACF;;AACD,MAAIJ,KAAJ,EAAW;AACT,WAAOA,KAAP;AACD;;AACD,SAAO,IAAP;AACD;;eAEcP,qB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport {Device} from '../../types';\n\n/**\n * Takes in a parsed simulator list and a desired name, and returns an object with the matching simulator. The desired\n * name can optionally include the iOS version in between parenthesis after the device name. Ex: \"iPhone 6 (9.2)\" in\n * which case it'll attempt to find a simulator with the exact version specified.\n *\n * If the simulatorString argument is null, we'll go into default mode and return the currently booted simulator, or if\n * none is booted, it will be the first in the list.\n *\n * @param simulators a parsed list from `xcrun simctl list --json devices` command\n * @param simulatorString the string with the name of desired simulator. If null, it will use the currently\n *        booted simulator, or if none are booted, the first in the list.\n */\nfunction findMatchingSimulator(\n  simulators: {devices: {[index: string]: Array<Device>}},\n  simulatorString: string,\n) {\n  if (!simulators.devices) {\n    return null;\n  }\n  const devices = simulators.devices;\n  let simulatorVersion;\n  let simulatorName;\n\n  const parsedSimulatorName = simulatorString\n    ? simulatorString.match(/(.*)? (?:\\((\\d+\\.\\d+)?\\))$/)\n    : [];\n\n  if (parsedSimulatorName && parsedSimulatorName[2] !== undefined) {\n    simulatorVersion = parsedSimulatorName[2];\n    simulatorName = parsedSimulatorName[1];\n  } else {\n    simulatorName = simulatorString;\n  }\n\n  let match;\n  for (const versionDescriptor in devices) {\n    const device = devices[versionDescriptor];\n    let version = versionDescriptor;\n\n    if (/^com\\.apple\\.CoreSimulator\\.SimRuntime\\./g.test(version)) {\n      // Transform \"com.apple.CoreSimulator.SimRuntime.iOS-12-2\" into \"iOS 12.2\"\n      version = version.replace(\n        /^com\\.apple\\.CoreSimulator\\.SimRuntime\\.([^-]+)-([^-]+)-([^-]+)$/g,\n        '$1 $2.$3',\n      );\n    }\n\n    // Making sure the version of the simulator is an iOS or tvOS (Removes Apple Watch, etc)\n    if (!version.includes('iOS') && !version.includes('tvOS')) {\n      continue;\n    }\n    if (simulatorVersion && !version.endsWith(simulatorVersion)) {\n      continue;\n    }\n    for (const i in device) {\n      const simulator = device[i];\n      // Skipping non-available simulator\n      if (\n        simulator.availability !== '(available)' &&\n        // @ts-ignore verify isAvailable parameter\n        simulator.isAvailable !== 'YES' &&\n        simulator.isAvailable !== true\n      ) {\n        continue;\n      }\n      const booted = simulator.state === 'Booted';\n      if (booted && simulatorName === null) {\n        return {\n          udid: simulator.udid,\n          name: simulator.name,\n          booted,\n          version,\n        };\n      }\n      if (simulator.name === simulatorName && !match) {\n        match = {\n          udid: simulator.udid,\n          name: simulator.name,\n          booted,\n          version,\n        };\n      }\n      // Keeps track of the first available simulator for use if we can't find one above.\n      if (simulatorName === null && !match) {\n        match = {\n          udid: simulator.udid,\n          name: simulator.name,\n          booted,\n          version,\n        };\n      }\n    }\n  }\n  if (match) {\n    return match;\n  }\n  return null;\n}\n\nexport default findMatchingSimulator;\n"]}