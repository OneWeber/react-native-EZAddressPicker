{"version":3,"sources":["../../../src/commands/runIOS/parseIOSDevicesList.ts"],"names":["parseIOSDevicesList","text","devices","split","forEach","line","index","device","match","noSimulator","myMac","name","udid","push","version"],"mappings":";;;;;;;AAAA;;;;;;;;AASA;;;;;;;AAOA,SAASA,mBAAT,CAA6BC,IAA7B,EAA0D;AACxD,QAAMC,OAAsB,GAAG,EAA/B;AAEAD,EAAAA,IAAI,CAACE,KAAL,CAAW,IAAX,EAAiBC,OAAjB,CAAyB,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACxC,UAAMC,MAAM,GAAGF,IAAI,CAACG,KAAL,CAAW,2BAAX,CAAf;AACA,UAAMC,WAAW,GAAGJ,IAAI,CAACG,KAAL,CAAW,qCAAX,CAApB;;AAEA,QAAIF,KAAK,KAAK,CAAd,EAAiB;AACf,YAAMI,KAAK,GAAGL,IAAI,CAACG,KAAL,CAAW,iBAAX,CAAd;;AACA,UAAIE,KAAJ,EAAW;AACT,cAAMC,IAAI,GAAGD,KAAK,CAAC,CAAD,CAAlB;AACA,cAAME,IAAI,GAAGF,KAAK,CAAC,CAAD,CAAlB;AACAR,QAAAA,OAAO,CAACW,IAAR,CAAa;AACXD,UAAAA,IADW;AAEXD,UAAAA;AAFW,SAAb;AAID;AACF;;AAED,QAAIJ,MAAM,IAAI,IAAV,IAAkBE,WAAW,IAAI,IAArC,EAA2C;AACzC,YAAME,IAAI,GAAGJ,MAAM,CAAC,CAAD,CAAnB;AACA,YAAMO,OAAO,GAAGP,MAAM,CAAC,CAAD,CAAtB;AACA,YAAMK,IAAI,GAAGL,MAAM,CAAC,CAAD,CAAnB;AACAL,MAAAA,OAAO,CAACW,IAAR,CAAa;AAACD,QAAAA,IAAD;AAAOD,QAAAA,IAAP;AAAaG,QAAAA;AAAb,OAAb;AACD;AACF,GAtBD;AAwBA,SAAOZ,OAAP;AACD;;eAEcF,mB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nimport {Device} from '../../types';\n\n/**\n * Parses the output of `xcrun simctl list devices` command\n * Expected text looks roughly like this:\n * Known Devices:\n * this-mac-device [ID]\n * Some Apple Simulator (Version) [ID]\n */\nfunction parseIOSDevicesList(text: string): Array<Device> {\n  const devices: Array<Device> = [];\n\n  text.split('\\n').forEach((line, index) => {\n    const device = line.match(/(.*?) \\((.*?)\\) \\[(.*?)\\]/);\n    const noSimulator = line.match(/(.*?) \\((.*?)\\) \\[(.*?)\\] \\((.*?)\\)/);\n\n    if (index === 1) {\n      const myMac = line.match(/(.*?) \\[(.*?)\\]/);\n      if (myMac) {\n        const name = myMac[1];\n        const udid = myMac[2];\n        devices.push({\n          udid,\n          name,\n        });\n      }\n    }\n\n    if (device != null && noSimulator == null) {\n      const name = device[1];\n      const version = device[2];\n      const udid = device[3];\n      devices.push({udid, name, version});\n    }\n  });\n\n  return devices;\n}\n\nexport default parseIOSDevicesList;\n"]}